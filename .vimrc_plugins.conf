" Airline{
" ----- bling/vim-airline settings -----"
  let g:airline_detect_paste=1

	"" Show airline for tabs too
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#quickfix#quickfix_text = 'Quickfix'
  let airline#extensions#default#section_use_groupitems = 1
  let g:airline#extensions#quickfix#location_text = 'Location'

	"" Use the solarized theme for the Airline status bar
  let g:airline_theme='bubblegum'
  "let g:airline_theme='qwq'
  "let g:airline_theme='cobalt2'
  "let g:airline_theme='hybrid'
  let g:airline#extensions#hunks#non_zero_only = 1
  let g:airline#extensions#tabline#left_sep = ' '
  let g:airline#extensions#tabline#left_alt_sep = '|'
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#syntastic#enabled = 1
  let g:airline#extensions#branch#enabled = 1
  let g:airline#extensions#virtualenv#enabled = 1
  let g:airline#extensions#tagbar#enabled = 1
  let g:airline_skip_empty_sections = 1
  "let g:airline_section_c = '%{getcwd()}/%t'
  let g:airline_section_c = '%t'

  if !exists('g:airline_symbols')
    let g:airline_symbols = {}
  endif

  if !exists('g:airline_powerline_fonts')
    let g:airline#extensions#tabline#left_sep = ' '
    let g:airline#extensions#tabline#left_alt_sep = '|'
    let g:airline_left_sep          = '▶'
    let g:airline_left_alt_sep      = '»'
    let g:airline_right_sep         = '◀'
    let g:airline_right_alt_sep     = '«'
    let g:airline#extensions#branch#prefix     = '⤴' "➔, ➥, ⎇
    let g:airline#extensions#readonly#symbol   = '⊘'
    let g:airline#extensions#linecolumn#prefix = '¶'
    let g:airline#extensions#paste#symbol      = 'ρ'
    let g:airline_symbols.linenr    = '␊'
    let g:airline_symbols.branch    = '⎇'
    let g:airline_symbols.paste     = 'ρ'
    "let g:airline_symbols.paste     = 'Þ'
    "let g:airline_symbols.paste     = '∥'
    let g:airline_symbols.whitespace = 'Ξ'
  else
    let g:airline#extensions#tabline#left_sep = ''
    let g:airline#extensions#tabline#left_alt_sep = ''

    " powerline symbols
    let g:airline_left_sep = ''
    let g:airline_left_alt_sep = ''
    let g:airline_right_sep = ''
    let g:airline_right_alt_sep = ''
    let g:airline_symbols.branch = ''
    let g:airline_symbols.readonly = ''
    "let g:airline_symbols.linenr = ''
  endif

"}


" Syntax{

  " ----- scrooloose/syntastic settings -----
  let g:pycodestyle = 1

  let g:syntastic_error_symbol = '✘'
	let g:syntastic_warning_symbol = "▲"
	augroup mySyntastic
	au!
      "au FileType tex let b:syntastic_mode = "passive"
      au FileType tex let b:syntastic_mode = "active"
	augroup END

    " ---- Status line flags ----
    let g:syntastic_stl_format = "[%E{Error: %fe:%e}%B{, }%W{Warning: %fw:%w}]"
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 0

"}

" Validator {
    "let g:validator_{filetype}_checkers = ['<checker_name>']
    let g:validator_python_checkers = ['pep8']

    "PEP8{
      autocmd FileType python noremap <buffer> :call Autopep8()<CR>
    "}
    " for example, choose eslint to check javascript:
    "let g:validator_javascript_checkers = ['eslint']
    let g:validator_debug = 1
    let g:validator_permament_sign = 1
    let g:validator_error_msg_format = "[ ● %d/%d issues ]"
    let g:validator_auto_open_quickfix = 1
    let g:validator_filetype_map = {"python.django": "python"}
"}


"NERDTree {

" ----- jistr/vim-nerdtree-tabs -----
	" To have NERDTree always open on startup
	let g:nerdtree_tabs_open_on_console_startup = 1"
  let NERDTreeWinSize = 35
  let NERDTreeAutoCenter = 1
  let NERDTreeHighlightCursorline = 1
  let NERDTreeShowHidden=0

  let g:NERDTreeIndicatorMapCustom = {
        \ "Modified"  : "✹",
        \ "Staged"    : "✚",
        \ "Untracked" : "✭",
        \ "Renamed"   : "➜",
        \ "Unmerged"  : "═",
        \ "Deleted"   : "✖",
        \ "Dirty"     : "✗",
        \ "Clean"     : "✔︎",
        \ 'Ignored'   : '☒',
        \ "Unknown"   : "?"
        \ }

  "autocmd VimEnter * NERDTreeSteppedOpen
  "autocmd VimEnter * NERDTreeMirrorOpen
  "autocmd BufEnter * NERDTreeMirrorOpen

  autocmd BufEnter * lcd %:p:h

  "let NERDTreeShowBookmarks=1
  let g:NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
  "let NERDTreeChDirMode=2
  let g:NERDTreeQuitOnOpen=1
  "let NERDTreeMouseMode=2
  "let NERDTreeShowHidden=1
  let g:NERDTreeKeepTreeInNewTab=1
  "let g:nerdtree_tabs_open_on_gui_startup=1
  let g:NERDTreeMirrorOpen=1


  " NERDTress File highlighting
  function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
    exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
    exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
  endfunction

  call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
  call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
  call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('py', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
  call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
  call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
  call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
  call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
  call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
  call NERDTreeHighlightFile('ds_store', 'Gray', 'none', '#686868', '#151515')
  call NERDTreeHighlightFile('gitconfig', 'Gray', 'none', '#686868', '#151515')
  call NERDTreeHighlightFile('gitignore', 'red', 'none', '#686868', '#151515')
  call NERDTreeHighlightFile('bashrc', 'Gray', 'none', '#686868', '#151515')
  call NERDTreeHighlightFile('bashprofile', 'Gray', 'none', '#686868', '#151515')
"}


" Python {
  "Pymode variables:
  "-------------------
  let g:pymode = 1
  let g:pymode_breakpoint = 1
  let g:pymode_breakpoint_bind = '<leader>b'
  let g:pymode_doc = 1
  let g:pymode_doc_bind = '<C-d>'
  let g:pymode_folding = 0
  let g:pymode_indent = 1
  let g:pymode_lint = 0
  let g:pymode_lint_checkers = ['pep8', 'pyflakes', 'mccabe']
  let g:pymode_lint_cwindow = 1
  "let g:pymode_lint_ignore = ''
  let g:pymode_lint_message = 1
  let g:pymode_lint_on_fly = 1
  let g:pymode_lint_on_write = 1
  let g:pymode_lint_select = ''
  let g:pymode_lint_signs = 1
  let g:pymode_motion = 1
  let g:pymode_options = 1
  "let g:pymode_paths = []
  "let g:pymode_quickfix_maxheight = 6
  "let g:pymode_quickfix_minheight = 3
  let g:pymode_rope = 0
  let g:pymode_run = 1
  "letg: pymode_run_bind = '<leader>r'
  let g:pymode_trim_whitespaces = 1
  let g:pymode_virtualenv = 1
  "let pymode_virtualenv_enabled = ''
  "let pymode_virtualenv_path = ''
  let g:pymode_lint_todo_symbol     = 'W>'
  let g:pymode_lint_comment_symbol  = 'C>'
  let g:pymode_lint_visual_symbol   = 'V>'
  let g:pymode_lint_error_symbol    = 'E>'
  let g:pymode_lint_info_symbol     = 'I>'
  let g:pymode_lint_pyflakes_symbol = 'F>'

  ""Auto-check file for errors on write:
  "let g:PyFlakeOnWrite = 1

  ""List of checkers used:
  "let g:PyFlakeCheckers = 'pep8,mccabe,frosted'

  ""Default maximum complexity for mccabe:
  "let g:PyFlakeDefaultComplexity=10

  ""List of disabled pep8 warnings and errors:
  let g:PyFlakeDisabledMessages = 'E902'

  ""Default aggressiveness for autopep8:
  "let g:PyFlakeAggressive = 0

  ""Default height of quickfix window:
  "let g:PyFlakeCWindow = 6

  ""Whether to place signs or not:
  "let g:PyFlakeSigns = 1

  ""When usign signs, this is the first id that will be used to identify the signs. Tweak this if you are using other plugins that also use the sign gutter
  "let g:PyFlakeSignStart = 1

  ""Maximum line length for PyFlakeAuto command
  "let g:PyFlakeMaxLineLength = 100

  ""Visual-mode key command for PyFlakeAuto
  "let g:PyFlakeRangeCommand = 'Q'

  ""Force python 3 interface:
  "let g:PyFlakeForcePyVersion = 3

"}


"Theme{
  "Icons{
  if exists("g:loaded_webdevicons")
    " Calls webdevicons#softRefresh()
    " basically a backwards compatibility convenience
    call webdevicons#refresh()
    " Does a 'hard' refresh of NERDTree
    " resets vim-devicons syntax and closes and reopens NERDTree
    call webdevicons#hardRefresh()
    " Does a 'soft' refresh of NERDTree
    " resets vim-devicons syntax and toggles NERDTree to the same state
    call webdevicons#softRefresh()
    " Returns the current version of the plugin
    call webdevicons#version()
  endif
  " loading the plugin 
  let g:webdevicons_enable = 1
  " adding the flags to NERDTree 
  let g:webdevicons_enable_nerdtree = 1
  " adding the custom source to unite 
  let g:webdevicons_enable_unite = 1
  " adding the column to vimfiler 
  let g:webdevicons_enable_vimfiler = 1
  " adding to vim-airline's tabline 
  let g:webdevicons_enable_airline_tabline = 1
  " adding to vim-airline's statusline 
  let g:webdevicons_enable_airline_statusline = 1
  " ctrlp glyphs
  let g:webdevicons_enable_ctrlp = 1
  " adding to flagship's statusline 
  let g:webdevicons_enable_flagship_statusline = 1
  " turn on/off file node glyph decorations (not particularly useful)
  let g:WebDevIconsUnicodeDecorateFileNodes = 1
  " use double-width(1) or single-width(0) glyphs 
  " only manipulates padding, has no effect on terminal or set(guifont) font
  let g:WebDevIconsUnicodeGlyphDoubleWidth = 1
  " whether or not to show the nerdtree brackets around flags 
  let g:webdevicons_conceal_nerdtree_brackets = 1
  " the amount of space to use after the glyph character (default ' ')
  let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
  " Force extra padding in NERDTree so that the filetype icons line up vertically 
  let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1  "}
  " enable folder/directory glyph flag (disabled by default with 0)
  let g:WebDevIconsUnicodeDecorateFolderNodes = 1
  " enable open and close folder/directory glyph flags (disabled by default with 0)
  let g:DevIconsEnableFoldersOpenClose = 1
  " enable pattern matching glyphs on folder/directory (enabled by default with 1)
  let g:DevIconsEnableFolderPatternMatching = 1
  " enable file extension pattern matching glyphs on folder/directory (disabled by default with 0)
  let g:DevIconsEnableFolderExtensionPatternMatching = 1
  " enable custom folder/directory glyph exact matching 
  " (enabled by default when g:WebDevIconsUnicodeDecorateFolderNodes is set to 1)
  let WebDevIconsUnicodeDecorateFolderNodesExactMatches = 1
"}

"autocmd VimEnter * source ~/.vimrc
set t_Co=256
hi Normal ctermbg=none
